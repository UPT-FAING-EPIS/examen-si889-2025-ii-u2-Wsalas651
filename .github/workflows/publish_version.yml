name: Publicar Versión, Tests y Cobertura

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

# Evitar colisiones con otros despliegues a GitHub Pages
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-test:
    name: Compilar y ejecutar tests con cobertura
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 7
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'

      - name: Restore
        run: dotnet restore ExamenSI889.sln

      - name: Build (Release)
        run: dotnet build ExamenSI889.sln -c Release --no-restore

      - name: Test (con cobertura)
        run: |
          # Usa coverlet.collector configurado en el proyecto de tests
          dotnet test ExamenSI889.sln \
            -c Release \
            --no-build \
            --collect "XPlat Code Coverage" \
            --results-directory TestResults \
            --logger "trx"

      - name: Instalar ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generar reporte HTML de cobertura
        run: |
          mkdir -p coverage-report
          ~/.dotnet/tools/reportgenerator \
            -reports:"**/TestResults/**/coverage.cobertura.xml" \
            -targetdir:"coverage-report" \
            -reporttypes:"HtmlInline_AzurePipelines;Cobertura" \
            -tag:"${{ github.run_id }}"
          echo "Cobertura generada en coverage-report/index.html"

      - name: Subir artefacto de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report
          retention-days: 14

      - name: Configurar GitHub Pages para cobertura
        uses: actions/configure-pages@v4
        with:
          enablement: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Subir sitio de cobertura a Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: coverage-report

      - name: Resumen de ejecución
        run: |
          echo "## ✅ Build y Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Compilación: Release" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ejecutados con cobertura (XPlat Code Coverage)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Cobertura" >> $GITHUB_STEP_SUMMARY
          echo "- Reporte HTML: empaquetado y publicado en GitHub Pages" >> $GITHUB_STEP_SUMMARY
          echo "- Artefacto: coverage-report" >> $GITHUB_STEP_SUMMARY

  deploy-coverage:
    name: Deploy cobertura a GitHub Pages
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Publicar URL del reporte
        run: |
          echo "## 🌐 Cobertura publicada" >> $GITHUB_STEP_SUMMARY
          echo "El sitio de cobertura ha sido desplegado en GitHub Pages." >> $GITHUB_STEP_SUMMARY
          echo "Si hay otro workflow publicando en Pages, el último despliegue será el visible." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### URL del reporte" >> $GITHUB_STEP_SUMMARY
          echo "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY

  release:
    name: Publicar Release
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Crear Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false
          body: |
            ## 🚀 Release ${{ github.ref_name }}
            - Compilación en Release completada
            - Tests unitarios ejecutados con cobertura
            - Reporte de cobertura publicado en GitHub Pages
            
            Generado por workflow `publish_version.yml`.